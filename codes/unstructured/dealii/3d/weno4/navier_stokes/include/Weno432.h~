#ifndef WENO432_H_
#define WENO432_H_

#include "Headers.h"
#include "CLS.h"
#include "LU.h"
//#include "Riemann_Solvers.h"
#include "Exceptions.h"
#include "cell_properties.h"
#include "trueSolution.h"
#include "claw.h"
// Complementary Function Definitions  

const double M = 0.1;  

Vector<double> initial_condition(const Point<3>&, const double);

Vector<double> solve_system(const FullMatrix<double>&, const Vector<double>&);

double evaluate_weno_polynomial(const Vector<double>&, const Vector<double>&,const Point<3>&, double); 
Vector<double> evaluate_conservative_gradient(const Vector<double>& coeffs, const Vector<double>& consts, Point<3> P, double h) ;
double compute_second_order_smoothness_indicator(Vector<double>, Vector<double>, double);
double compute_third_order_smoothness_indicator(Vector<double>, Vector<double>, double);
double compute_fourth_order_smoothness_indicator(Vector<double>, Vector<double>, double);
double compute_smoothness_indicator(const Vector<double>&);

DoFHandler<3>::active_cell_iterator return_cell_pointer(const DoFHandler<3>&, unsigned int);

// Main Class Declaration 

class Weno4_3D {
    
    void make_grid();  
    void setup_system ();
    void allocate_memory ();
    void precompute_matrices();
    void precompute_matrices_veclocity();
    void compute_IS_constants(); 
    void compute_weno_polynomial_constants();
    void reconstruct_quad();
    void reconstruct_check();
//    void compute_primitive();
    void reconstruct();
	void initialize();
	void compute_cell_properties();
	void compute_rhs();
    void compute_time_step_based_on_cfl_number();
    void solve_ssprk33();
    void solve_rk6();
//	void solve_ssprk54();
//    void solve_ader(); 
	void output_results ();
	void output_grid ();
    void restart();
    void restart_r();
	void post_process_force();
	void post_process_ke();
	void L_norm();

    MPI_Comm                                  mpi_communicator;

    parallel::shared::Triangulation<3>			triangulation;

    IndexSet                                  locally_owned_dofs;
    IndexSet                                  locally_relevant_dofs;

    LA::MPI::Vector                           RHO;
    LA::MPI::Vector                           RHO_U;
    LA::MPI::Vector                           RHO_V;
    LA::MPI::Vector                           RHO_W;
    LA::MPI::Vector                           E;

    LA::MPI::Vector                           local_RHO;
    LA::MPI::Vector                           local_RHO_U;
    LA::MPI::Vector                           local_RHO_V;
    LA::MPI::Vector                           local_RHO_W;
    LA::MPI::Vector                           local_E;

    // Coefficients for WENO polynomials
    std::vector< Vector<double> >  coeffs_RHO, coeffs_RHO_U, coeffs_RHO_V, coeffs_RHO_W, coeffs_E;
    std::vector< Vector<double> >  upwind_coeffs_RHO, upwind_coeffs_RHO_U, upwind_coeffs_RHO_V, upwind_coeffs_RHO_W, upwind_coeffs_E;

	LA::MPI::Vector error_RHO;
	LA::MPI::Vector local_error_RHO;
	LA::MPI::Vector error_RHO_U;
	LA::MPI::Vector local_error_RHO_U;
	LA::MPI::Vector error_RHO_V;
	LA::MPI::Vector local_error_RHO_V;
	LA::MPI::Vector error_RHO_W;
	LA::MPI::Vector local_error_RHO_W;
	LA::MPI::Vector error_E;
	LA::MPI::Vector local_error_E;

/*
   	Vector<double> local_difference_RHO;
   	Vector<double> local_difference_RHO_U;
   	Vector<double> local_difference_RHO_V;
   	Vector<double> local_difference_RHO_W;
   	Vector<double> local_difference_E;
*/
    // WENO polynomial constants (only depend on mesh)
    std::vector< Vector<double> >  WENO_poly_consts;
    std::vector<bool> is_corner_cell; 
    std::vector<bool> is_relevant_cell;
	std::vector<bool> is_ghost_cell; 
	std::vector<bool> is_1st_order;
	std::vector< cell_properties > Cell;   

	Vector<double> rhs1;
	Vector<double> rhs2;
	Vector<double> rhs3;
	Vector<double> rhs4;
	Vector<double> rhs5;
    
    // Fourth Order Stencil 
    std::vector< Constrained_LS > CLS_R4; 

    // Third Order Stencils 
    std::vector< bool > is_admissible_R3;  // Centered third order stencil stencil
    std::vector< Constrained_LS > CLS_R3; 

	std::vector < std::vector< bool > > is_admissible_R3_d; // Third order stencil
    std::vector < std::vector< Constrained_LS > > CLS_R3_d; 
    std::vector < std::vector< LUdcmp > >	LU_R2_d;

    std::vector< Constrained_LS > CLS_R4_slip; 
    std::vector< Constrained_LS > CLS_R3_slip;
    std::vector < std::vector< Constrained_LS > > CLS_R3_d_slip; 
    std::vector < std::vector< LUdcmp > >	LU_R2_d_slip;

    std::map <unsigned int, unsigned int> wall_boundary_index_map;
    
    std::vector< Vector<double> >  IS_constants;   

	unsigned int dofs_per_cell ;
	unsigned int n_locally_cells;
	unsigned int n_vertices;
	unsigned int n_faces;
	unsigned int n_relevant_cells, n_post_process_cell, n_store_cell;

	std::vector<types::global_dof_index> local_dof_indices;
	std::vector<types::global_dof_index> local_neighbor_dof_indices;

    ConditionalOStream                        pcout;
    TimerOutput                               computing_timer;

 
    std::map <unsigned int, unsigned int> global_to_local_index_map;    
    std::map <unsigned int, unsigned int> face_index_map;    
    std::vector <unsigned int> local_to_global_index_map;    
	std::vector< std::vector< std::vector<unsigned int> > > cell_neighbor_index;
	std::vector< std::vector< std::vector<unsigned int> > > cell_neighbor_neighbor_index;
	std::vector< std::vector<unsigned int> > cell_all_neighbor_index;
	std::vector< std::vector<unsigned int> > cell_diagonal_neighbor_index;
	std::vector< DoFHandler<3>::active_cell_iterator > local_index_to_iterator;
	std::vector< std::vector<unsigned int> > vertex_to_cell_index;
    std::map <unsigned int, unsigned int> vertex_map;
 
    double dt;
	double finalTime;
	double cfl;
    double h_min; 
	double time;
	double weight_ls;
	bool RESTART, Use_ader;

	unsigned int n_refinement;

    FE_DGQ<3> fv;
	DoFHandler<3> dof_handler;

	Conservation_Law claw;
	MappingQ<3> mapping;
	const TrueSolution	true_solution;
  	SphericalManifold<3> boundary_circular;
public:
 	Weno4_3D(double, double, bool, unsigned int);
	void run ();
};



#endif /* WENO432_H_ */
