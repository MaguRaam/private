#include "../include/CLS.h"
#include "../include/Headers.h"

// Constrained Least Squares class function definitions 

// ===========================================================================


void Allocate_2D_R(double**& m, int d1, int d2) {
        m=new double* [d1];
        for (int i=0; i<d1; ++i) {
                m[i]=new double [d2];
                for (int j=0; j<d2; ++j)
                        m[i][j]=0.0;
        }
}


// Solution of a linear system AX = B using Gaussian elimination
void Factor(  double** a, int n, int*& npivot,  double& det, bool& sing) {
        int i0;
        double* s;
        double* c;
        s = new   double[n];
        c = new   double[n];

        det = 1.0; sing = false ;
        for(int p=0;p<n;p++) {
                s[p] = fabs(a[p][0]);
                for(int q=1;q<n;q++) {
                        if(fabs(a[p][q])>s[p])
                                s[p] = fabs(a[p][q]);
                }
        }

        for(int k=0;k<(n-1);k++) {

                c[k] = fabs(a[k][k])/s[k];
                i0 = k;
                for(int i=k+1;i<n;i++) {
                        if((fabs(a[i][k])/s[i])>c[k]) {
                                i0 = i;
                                c[k] = (fabs(a[i][k])/s[i]);
                        }
                }
                npivot[k] = i0;
                if(fabs(c[k]) <= 1E-16) {
                        sing = true;
                        std::cerr << "\n ERROR: Singular Matrix";
                        std::exit(1);
                }

                if(i0 != k) {
                        det = -det;
                        for(int j =k;j<n;j++){
                                a[k][j] = a[k][j] + a[i0][j];
                                a[i0][j] = a[k][j] - a[i0][j];
                                a[k][j] = a[k][j] - a[i0][j];
                        }
                }

                for(int l=k+1;l<n;l++) {
                        a[l][k] = a[l][k]/a[k][k];  // Multiplier mij
                        for(int m=k+1;m<n;m++) {
                                a[l][m] = a[l][m] - a[l][k]*a[k][m];
                        }
                }
                det = det * a[k][k];
        }
        det = det*a[n-1][n-1];
        delete[] s;
        delete[] c;
}

void Solve(  double** a, int n,   double*& b, int*& npivot) {
          double temp;
        int i0;

        for(int k=0;k<n-1;k++) {
                i0 = npivot[k];
                if(i0 != k) {
                        b[i0] = b[i0] + b[k];
                        b[k] = b[i0] - b[k];
                        b[i0] = b[i0] - b[k];
                }
                for(int i=k+1;i<n;i++)
                        b[i] = b[i] - a[i][k]*b[k];
        }

        b[n-1] = b[n-1]/a[n-1][n-1];
        for(int p=n-2;p>=0;p--) {
                temp = 0;
                for(int q=p+1;q<n;q++) {
                        temp += a[p][q]*b[q];
                }
                b[p] = (b[p]-temp)/a[p][p];
        }
}

// Find inverse of a matrix using LU decomposition
void LUInverse(  double**& a_inv,   double** a, int n) {
        bool sing;
        int i, j, *pivot;
        double *Solution, **Temp_Mat, det ;

        Solution = new   double[n] ; pivot = new int[n] ;
        Allocate_2D_R(Temp_Mat,n,n);
        for(i = 0 ; i < n ; i++) {
                for(j = 0 ; j < n ; j++) Temp_Mat[i][j] = a[i][j] ;
        }

        Factor(Temp_Mat,n,pivot,det,sing);
        if(sing) {
                std::cerr << "Exiting due to singular matrix in QR Inverse function";
                std::exit(1);
        } else {
                for(i = 0 ; i < n ; i++) {
                        for(j = 0 ; j < n ; j++) {
                                if(j == i) Solution[j] = 1.0;
                                else Solution[j] = 0.0 ;
                        }
                        Solve(Temp_Mat,n,Solution,pivot) ;
                        for(j = 0 ; j < n ; j++) a_inv[j][i] = Solution[j] ;
                }
        }

        delete [] pivot ; delete [] Solution ;
        for(i = 0 ; i < n ; i++ ) delete [] Temp_Mat[i] ;
        delete [] Temp_Mat ;
}

// Function Definitions 

void print_matrix(FullMatrix<double> A) {
    unsigned int m = A.m(); unsigned int n = A.n(); 
    
    for (unsigned int i = 0; i < m; i++) {
        for (unsigned int j = 0; j < n; j++) {
            std::cout << A(i, j) << "    \t"; 
        }
        std::cout << std::endl; 
    }
}

void print_vector(Vector<double> b) {
    
    for (unsigned int i = 0; i < b.size(); i++) {
            std::cout << b(i) << "    \t"; 
    }
    std::cout << std::endl; 
}

// ===========================================================================

// Default constructor 

// ===========================================================================

Constrained_LS::Constrained_LS() {}

// ===========================================================================

// Initialize the object (For Constrained least squares)

// ===========================================================================

void Constrained_LS::initialize(FullMatrix<double> A, FullMatrix<double> C) {

    solve_least_squares = false; 
    
    assert(A.n() == C.n());
    
    m = A.m(); n = A.n(); p = C.m(); 
    
    R.reinit(n, n); Q1.reinit(m, n); Q2.reinit(p, n); Rbar.reinit(p, p); Qbar.reinit(n, p);
    
    // Concatenate A and C int qr array 

    gsl_matrix * qr = gsl_matrix_alloc ((m+p), n);
    gsl_matrix * q = gsl_matrix_alloc ((m+p), (m+p));
    gsl_matrix * r = gsl_matrix_alloc ((m+p), n);
    
    
    for (unsigned int i = 0; i < m; i++) {
        for (unsigned int j = 0; j < n; j++) {
            gsl_matrix_set(qr, i, j, A(i, j));  // Put A into qr 
        }
    }
    
    for (unsigned int i = m; i < (m+p); i++) {
        for (unsigned int j = 0; j < n; j++) {
            gsl_matrix_set(qr, i, j, C(i-m, j));
        }
    }
    
    // Find the QR decomposition of concatenated matrix AC and store the R matrix 
    
    int k = std::min((m+p), n); 
    
    gsl_vector * tau = gsl_vector_alloc (k);
    gsl_linalg_QR_decomp (qr, tau); 
    gsl_linalg_QR_unpack (qr, tau, q, r); 

    
    for (unsigned int i = 0; i < n; i++) {
        for (unsigned int j = 0; j < n; j++) {
            R(i, j) = gsl_matrix_get(r, i, j);
        }
    }
    
    // Get Q1 and Q2 matrices  
    
    for (unsigned int i = 0; i < m; i++) {
        for (unsigned int j = 0; j < n; j++) {
            Q1(i, j) =  gsl_matrix_get(q, i, j); 
        }
    }
    
    for (unsigned int i = m; i < (m+p); i++) {
        for (unsigned int j = 0; j < n; j++) {
            Q2(i-m, j) =  gsl_matrix_get(q, i, j); 
        }
    }
    
    
    
    // Get Qbar and Rbar 
    
    gsl_matrix * qr_bar = gsl_matrix_alloc (n, p);
    gsl_matrix * q_bar = gsl_matrix_alloc (n, n);
    gsl_matrix * r_bar = gsl_matrix_alloc (n, p);
    
    // Copy Q2' into qr2
    
    for (unsigned int i = 0; i < n; i++) {
        for (unsigned int j = 0; j < p; j++) {
            gsl_matrix_set(qr_bar, i, j, Q2(j, i)); 
        }
    }
    
    k = std::min(n, p); 
    
    gsl_vector * tau_bar = gsl_vector_alloc (k);
    gsl_linalg_QR_decomp (qr_bar, tau_bar); 
    gsl_linalg_QR_unpack (qr_bar, tau_bar, q_bar, r_bar); 
    
    for (unsigned int i = 0; i < p; i++) {
        for (unsigned int j = 0; j < p; j++) {
            Rbar(i, j) = gsl_matrix_get(r_bar, i, j);
        }
    }
    
    for (unsigned int i = 0; i < n; i++) {
        for (unsigned int j = 0; j < p; j++) {
                Qbar(i, j) = gsl_matrix_get(q_bar, i, j); 
        }
    }
    
    // Clean up all the memory 
    
    gsl_vector_free (tau); gsl_vector_free (tau_bar);
    gsl_matrix_free (qr); gsl_matrix_free (qr_bar);
    gsl_matrix_free (q); gsl_matrix_free (q_bar);
    gsl_matrix_free (r); gsl_matrix_free (r_bar);
    
}


void Constrained_LS::initialize(FullMatrix<double> A, FullMatrix<double> C, bool print_) {

    solve_least_squares = false; 
    print = print_;
    assert(A.n() == C.n());
    
    m = A.m(); n = A.n(); p = C.m(); 
    
    R.reinit(n, n); Q1.reinit(m, n); Q2.reinit(p, n); Rbar.reinit(p, p); Qbar.reinit(n, p);

	if(print) {
		std::cout<<"A\n";
		print_matrix(A);
		std::cout<<"C\n";
		print_matrix(C);
    }
    // Concatenate A and C int qr array 

    gsl_matrix * qr = gsl_matrix_alloc ((m+p), n);
    gsl_matrix * q = gsl_matrix_alloc ((m+p), (m+p));
    gsl_matrix * r = gsl_matrix_alloc ((m+p), n);
    
    
    for (unsigned int i = 0; i < m; i++) {
        for (unsigned int j = 0; j < n; j++) {
            gsl_matrix_set(qr, i, j, A(i, j));  // Put A into qr 
        }
    }
    
    for (unsigned int i = m; i < (m+p); i++) {
        for (unsigned int j = 0; j < n; j++) {
            gsl_matrix_set(qr, i, j, C(i-m, j));
        }
    }
    
    // Find the QR decomposition of concatenated matrix AC and store the R matrix 
    
    int k = std::min((m+p), n); 
    
    gsl_vector * tau = gsl_vector_alloc (k);
    gsl_linalg_QR_decomp (qr, tau); 
    gsl_linalg_QR_unpack (qr, tau, q, r); 

    
    for (unsigned int i = 0; i < n; i++) {
        for (unsigned int j = 0; j < n; j++) {
            R(i, j) = gsl_matrix_get(r, i, j);
        }
    }
    
    // Get Q1 and Q2 matrices  
    
    for (unsigned int i = 0; i < m; i++) {
        for (unsigned int j = 0; j < n; j++) {
            Q1(i, j) =  gsl_matrix_get(q, i, j); 
        }
    }
    
    for (unsigned int i = m; i < (m+p); i++) {
        for (unsigned int j = 0; j < n; j++) {
            Q2(i-m, j) =  gsl_matrix_get(q, i, j); 
        }
    }
    
    
    
    // Get Qbar and Rbar 
    
    gsl_matrix * qr_bar = gsl_matrix_alloc (n, p);
    gsl_matrix * q_bar = gsl_matrix_alloc (n, n);
    gsl_matrix * r_bar = gsl_matrix_alloc (n, p);
    
    // Copy Q2' into qr2
    
    for (unsigned int i = 0; i < n; i++) {
        for (unsigned int j = 0; j < p; j++) {
            gsl_matrix_set(qr_bar, i, j, Q2(j, i)); 
        }
    }
    
    k = std::min(n, p); 
    
    gsl_vector * tau_bar = gsl_vector_alloc (k);
    gsl_linalg_QR_decomp (qr_bar, tau_bar); 
    gsl_linalg_QR_unpack (qr_bar, tau_bar, q_bar, r_bar); 
    
    for (unsigned int i = 0; i < p; i++) {
        for (unsigned int j = 0; j < p; j++) {
            Rbar(i, j) = gsl_matrix_get(r_bar, i, j);
        }
    }
    
    for (unsigned int i = 0; i < n; i++) {
        for (unsigned int j = 0; j < p; j++) {
                Qbar(i, j) = gsl_matrix_get(q_bar, i, j); 
        }
    }
    
    // Clean up all the memory 
    
    gsl_vector_free (tau); gsl_vector_free (tau_bar);
    gsl_matrix_free (qr); gsl_matrix_free (qr_bar);
    gsl_matrix_free (q); gsl_matrix_free (q_bar);
    gsl_matrix_free (r); gsl_matrix_free (r_bar);
    
}

// ===========================================================================

// Initialize the object (For Least squares)

// ===========================================================================

void Constrained_LS::initialize(FullMatrix<double> A) {

    solve_least_squares = true; 
    
    m = A.m(); n = A.n(); 
    p = 0; 
    
    R.reinit(n, n); Q1.reinit(m, n);
    
    // For qr array 

    gsl_matrix * qr = gsl_matrix_alloc (m, n);
    gsl_matrix * q = gsl_matrix_alloc (m, m);
    gsl_matrix * r = gsl_matrix_alloc (m, n);
    
    
    for (unsigned int i = 0; i < m; i++) {
        for (unsigned int j = 0; j < n; j++) {
            gsl_matrix_set(qr, i, j, A(i, j));  // Put A into qr 
        }
    }
    
    // Find the QR decomposition of matrix A and store the R matrix 
    
    int k = std::min(m, n); 
    
    gsl_vector * tau = gsl_vector_alloc (k);
    gsl_linalg_QR_decomp (qr, tau); 
    gsl_linalg_QR_unpack (qr, tau, q, r); 

    
    for (unsigned int i = 0; i < n; i++) {
        for (unsigned int j = 0; j < n; j++) {
            R(i, j) = gsl_matrix_get(r, i, j);
        }
    }
    
    // Get Q1 matrix  
    
    for (unsigned int i = 0; i < m; i++) {
        for (unsigned int j = 0; j < n; j++) {
            Q1(i, j) =  gsl_matrix_get(q, i, j); 
        }
    }
    
    // Clean up all the memory 
    
    gsl_vector_free (tau); gsl_matrix_free (q); 
    gsl_matrix_free (qr); gsl_matrix_free (r);
    
}

// ===========================================================================

// Constructor taking two arguments  

// ===========================================================================

Constrained_LS::Constrained_LS(FullMatrix<double> A, FullMatrix<double> C) {
    
    initialize(A, C); 
}

// ===========================================================================

// Constructor taking one argument 

// ===========================================================================

Constrained_LS::Constrained_LS(FullMatrix<double> A) {
    
    initialize(A); 
}

// ===========================================================================

// Solve the actual constrained least squares problem 

// ===========================================================================

void Constrained_LS::solve(Vector<double> b, Vector<double> d, Vector<double>& x) {

	if(!(b.size() == m && d.size() == p && x.size() == n))
		std::cout<<"LS matrix row: "<<m<<"\tCLS matrix row: "<<p<<"\tmatrix column: "<<n<<"\tLS b: "<<b.size()<<"\tCLS d: "<<d.size()<<std::endl;
   
    assert(b.size() == m && d.size() == p && x.size() == n);
    
    Vector<double> u(p); Vector<double> c(p); Vector<double> w(p); Vector<double> y(n); Vector<double> y_dash(n);

	if(print) {
		std::cout<<"b: \n";
		print_vector(b);
		std::cout<<"d: \n";
		print_vector(d);
    }
    FullMatrix<double> RbarT(p, p); 
    
    for (unsigned int i = 0; i < p; i++) {
        for (unsigned int j = 0; j < p; j++) {
            RbarT(i, j) = Rbar(j, i); 
        }
    }
    
    RbarT.forward(u, d);

    
    FullMatrix<double> Inter(p, m); 
    
    Qbar.TmTmult(Inter, Q1); 
    
    Inter.vmult(c, b); 
    
    c.sadd(1.0, -1.0, u); 
    
    Rbar.backward(w, c);
    
    Q1.Tvmult(y, b); 
    Q2.Tvmult(y_dash, w);
    
    
    y.sadd(1.0, -1.0, y_dash);

    x = 0.0; 

    R.backward(x, y); 
    
}

void Constrained_LS::solve(Vector<double> b, Vector<double>& x) {
	if(!(b.size() == m && x.size() == n))
		std::cout<<"matrix row: "<<m<<"\tmatrix column: "<<n<<"\tb: "<<b.size()<<std::endl;
    assert(b.size() == m && x.size() == n);
    
    Vector<double> y(n); 
    
    Q1.Tvmult(y, b); 
    R.backward(x, y); 
    
}

// ===========================================================================
  
